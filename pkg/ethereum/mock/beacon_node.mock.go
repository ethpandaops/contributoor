// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethpandaops/contributoor/pkg/ethereum (interfaces: BeaconNodeAPI)
//
// Generated by this command:
//
//	mockgen -package mock -destination mock/beacon_node.mock.go github.com/ethpandaops/contributoor/pkg/ethereum BeaconNodeAPI
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBeaconNodeAPI is a mock of BeaconNodeAPI interface.
type MockBeaconNodeAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconNodeAPIMockRecorder
	isgomock struct{}
}

// MockBeaconNodeAPIMockRecorder is the mock recorder for MockBeaconNodeAPI.
type MockBeaconNodeAPIMockRecorder struct {
	mock *MockBeaconNodeAPI
}

// NewMockBeaconNodeAPI creates a new mock instance.
func NewMockBeaconNodeAPI(ctrl *gomock.Controller) *MockBeaconNodeAPI {
	mock := &MockBeaconNodeAPI{ctrl: ctrl}
	mock.recorder = &MockBeaconNodeAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconNodeAPI) EXPECT() *MockBeaconNodeAPIMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockBeaconNodeAPI) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockBeaconNodeAPIMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBeaconNodeAPI)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockBeaconNodeAPI) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockBeaconNodeAPIMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBeaconNodeAPI)(nil).Stop), ctx)
}

// Synced mocks base method.
func (m *MockBeaconNodeAPI) Synced(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Synced", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Synced indicates an expected call of Synced.
func (mr *MockBeaconNodeAPIMockRecorder) Synced(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Synced", reflect.TypeOf((*MockBeaconNodeAPI)(nil).Synced), ctx)
}
