// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethpandaops/contributoor/pkg/ethereum (interfaces: TopicManager)
//
// Generated by this command:
//
//	mockgen -package mock -destination mock/topic_manager.mock.go github.com/ethpandaops/contributoor/pkg/ethereum TopicManager
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	ethereum "github.com/ethpandaops/contributoor/pkg/ethereum"
	gomock "go.uber.org/mock/gomock"
)

// MockTopicManager is a mock of TopicManager interface.
type MockTopicManager struct {
	ctrl     *gomock.Controller
	recorder *MockTopicManagerMockRecorder
	isgomock struct{}
}

// MockTopicManagerMockRecorder is the mock recorder for MockTopicManager.
type MockTopicManagerMockRecorder struct {
	mock *MockTopicManager
}

// NewMockTopicManager creates a new mock instance.
func NewMockTopicManager(ctrl *gomock.Controller) *MockTopicManager {
	mock := &MockTopicManager{ctrl: ctrl}
	mock.recorder = &MockTopicManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicManager) EXPECT() *MockTopicManagerMockRecorder {
	return m.recorder
}

// ExcludeTopic mocks base method.
func (m *MockTopicManager) ExcludeTopic(topic string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExcludeTopic", topic)
}

// ExcludeTopic indicates an expected call of ExcludeTopic.
func (mr *MockTopicManagerMockRecorder) ExcludeTopic(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExcludeTopic", reflect.TypeOf((*MockTopicManager)(nil).ExcludeTopic), topic)
}

// GetEnabledTopics mocks base method.
func (m *MockTopicManager) GetEnabledTopics(ctx context.Context) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledTopics", ctx)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetEnabledTopics indicates an expected call of GetEnabledTopics.
func (mr *MockTopicManagerMockRecorder) GetEnabledTopics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledTopics", reflect.TypeOf((*MockTopicManager)(nil).GetEnabledTopics), ctx)
}

// IsActiveSubnet mocks base method.
func (m *MockTopicManager) IsActiveSubnet(subnetID uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActiveSubnet", subnetID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActiveSubnet indicates an expected call of IsActiveSubnet.
func (mr *MockTopicManagerMockRecorder) IsActiveSubnet(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActiveSubnet", reflect.TypeOf((*MockTopicManager)(nil).IsActiveSubnet), subnetID)
}

// IsExcluded mocks base method.
func (m *MockTopicManager) IsExcluded(topic string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExcluded", topic)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExcluded indicates an expected call of IsExcluded.
func (mr *MockTopicManagerMockRecorder) IsExcluded(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExcluded", reflect.TypeOf((*MockTopicManager)(nil).IsExcluded), topic)
}

// NeedsReconnection mocks base method.
func (m *MockTopicManager) NeedsReconnection() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedsReconnection")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// NeedsReconnection indicates an expected call of NeedsReconnection.
func (mr *MockTopicManagerMockRecorder) NeedsReconnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedsReconnection", reflect.TypeOf((*MockTopicManager)(nil).NeedsReconnection))
}

// RecordAttestation mocks base method.
func (m *MockTopicManager) RecordAttestation(subnetID uint64, slot phase0.Slot) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordAttestation", subnetID, slot)
}

// RecordAttestation indicates an expected call of RecordAttestation.
func (mr *MockTopicManagerMockRecorder) RecordAttestation(subnetID, slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordAttestation", reflect.TypeOf((*MockTopicManager)(nil).RecordAttestation), subnetID, slot)
}

// RegisterCondition mocks base method.
func (m *MockTopicManager) RegisterCondition(topic string, condition ethereum.TopicCondition) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterCondition", topic, condition)
}

// RegisterCondition indicates an expected call of RegisterCondition.
func (mr *MockTopicManagerMockRecorder) RegisterCondition(topic, condition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCondition", reflect.TypeOf((*MockTopicManager)(nil).RegisterCondition), topic, condition)
}

// ResetAfterReconnection mocks base method.
func (m *MockTopicManager) ResetAfterReconnection() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetAfterReconnection")
}

// ResetAfterReconnection indicates an expected call of ResetAfterReconnection.
func (mr *MockTopicManagerMockRecorder) ResetAfterReconnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAfterReconnection", reflect.TypeOf((*MockTopicManager)(nil).ResetAfterReconnection))
}

// SetAdvertisedSubnets mocks base method.
func (m *MockTopicManager) SetAdvertisedSubnets(subnets []int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAdvertisedSubnets", subnets)
}

// SetAdvertisedSubnets indicates an expected call of SetAdvertisedSubnets.
func (mr *MockTopicManagerMockRecorder) SetAdvertisedSubnets(subnets any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAdvertisedSubnets", reflect.TypeOf((*MockTopicManager)(nil).SetAdvertisedSubnets), subnets)
}

// ShouldSubscribe mocks base method.
func (m *MockTopicManager) ShouldSubscribe(ctx context.Context, topic string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldSubscribe", ctx, topic)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldSubscribe indicates an expected call of ShouldSubscribe.
func (mr *MockTopicManagerMockRecorder) ShouldSubscribe(ctx, topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldSubscribe", reflect.TypeOf((*MockTopicManager)(nil).ShouldSubscribe), ctx, topic)
}
