// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethpandaops/contributoor/pkg/ethereum (interfaces: TopicManager)
//
// Generated by this command:
//
//	mockgen -package mock -destination mock/topic_manager.mock.go github.com/ethpandaops/contributoor/pkg/ethereum TopicManager
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	ethereum "github.com/ethpandaops/contributoor/pkg/ethereum"
	gomock "go.uber.org/mock/gomock"
)

// MockTopicManager is a mock of TopicManager interface.
type MockTopicManager struct {
	ctrl     *gomock.Controller
	recorder *MockTopicManagerMockRecorder
	isgomock struct{}
}

// MockTopicManagerMockRecorder is the mock recorder for MockTopicManager.
type MockTopicManagerMockRecorder struct {
	mock *MockTopicManager
}

// NewMockTopicManager creates a new mock instance.
func NewMockTopicManager(ctrl *gomock.Controller) *MockTopicManager {
	mock := &MockTopicManager{ctrl: ctrl}
	mock.recorder = &MockTopicManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicManager) EXPECT() *MockTopicManagerMockRecorder {
	return m.recorder
}

// GetEnabledTopics mocks base method.
func (m *MockTopicManager) GetEnabledTopics(ctx context.Context) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledTopics", ctx)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetEnabledTopics indicates an expected call of GetEnabledTopics.
func (mr *MockTopicManagerMockRecorder) GetEnabledTopics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledTopics", reflect.TypeOf((*MockTopicManager)(nil).GetEnabledTopics), ctx)
}

// RegisterCondition mocks base method.
func (m *MockTopicManager) RegisterCondition(topic string, condition ethereum.TopicCondition) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterCondition", topic, condition)
}

// RegisterCondition indicates an expected call of RegisterCondition.
func (mr *MockTopicManagerMockRecorder) RegisterCondition(topic, condition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCondition", reflect.TypeOf((*MockTopicManager)(nil).RegisterCondition), topic, condition)
}

// ShouldSubscribe mocks base method.
func (m *MockTopicManager) ShouldSubscribe(ctx context.Context, topic string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldSubscribe", ctx, topic)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldSubscribe indicates an expected call of ShouldSubscribe.
func (mr *MockTopicManagerMockRecorder) ShouldSubscribe(ctx, topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldSubscribe", reflect.TypeOf((*MockTopicManager)(nil).ShouldSubscribe), ctx, topic)
}
