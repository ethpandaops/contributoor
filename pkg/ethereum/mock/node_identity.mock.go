// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethpandaops/contributoor/pkg/ethereum (interfaces: NodeIdentity)
//
// Generated by this command:
//
//	mockgen -package mock -destination mock/node_identity.mock.go github.com/ethpandaops/contributoor/pkg/ethereum NodeIdentity
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNodeIdentity is a mock of NodeIdentity interface.
type MockNodeIdentity struct {
	ctrl     *gomock.Controller
	recorder *MockNodeIdentityMockRecorder
	isgomock struct{}
}

// MockNodeIdentityMockRecorder is the mock recorder for MockNodeIdentity.
type MockNodeIdentityMockRecorder struct {
	mock *MockNodeIdentity
}

// NewMockNodeIdentity creates a new mock instance.
func NewMockNodeIdentity(ctrl *gomock.Controller) *MockNodeIdentity {
	mock := &MockNodeIdentity{ctrl: ctrl}
	mock.recorder = &MockNodeIdentityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeIdentity) EXPECT() *MockNodeIdentityMockRecorder {
	return m.recorder
}

// GetAttnets mocks base method.
func (m *MockNodeIdentity) GetAttnets() []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttnets")
	ret0, _ := ret[0].([]int)
	return ret0
}

// GetAttnets indicates an expected call of GetAttnets.
func (mr *MockNodeIdentityMockRecorder) GetAttnets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttnets", reflect.TypeOf((*MockNodeIdentity)(nil).GetAttnets))
}

// Start mocks base method.
func (m *MockNodeIdentity) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockNodeIdentityMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNodeIdentity)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockNodeIdentity) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockNodeIdentityMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNodeIdentity)(nil).Stop))
}
