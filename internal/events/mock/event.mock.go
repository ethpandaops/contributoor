// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethpandaops/contributoor/internal/events (interfaces: Event)
//
// Generated by this command:
//
//	mockgen -package mock -destination mock/event.mock.go github.com/ethpandaops/contributoor/internal/events Event
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	xatu "github.com/ethpandaops/xatu/pkg/proto/xatu"
	gomock "go.uber.org/mock/gomock"
)

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// Data mocks base method.
func (m *MockEvent) Data() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(any)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockEventMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockEvent)(nil).Data))
}

// Decorated mocks base method.
func (m *MockEvent) Decorated() *xatu.DecoratedEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decorated")
	ret0, _ := ret[0].(*xatu.DecoratedEvent)
	return ret0
}

// Decorated indicates an expected call of Decorated.
func (mr *MockEventMockRecorder) Decorated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decorated", reflect.TypeOf((*MockEvent)(nil).Decorated))
}

// Ignore mocks base method.
func (m *MockEvent) Ignore(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ignore", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ignore indicates an expected call of Ignore.
func (mr *MockEventMockRecorder) Ignore(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ignore", reflect.TypeOf((*MockEvent)(nil).Ignore), arg0)
}

// Meta mocks base method.
func (m *MockEvent) Meta() *xatu.Meta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(*xatu.Meta)
	return ret0
}

// Meta indicates an expected call of Meta.
func (mr *MockEventMockRecorder) Meta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockEvent)(nil).Meta))
}

// Time mocks base method.
func (m *MockEvent) Time() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Time")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Time indicates an expected call of Time.
func (mr *MockEventMockRecorder) Time() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockEvent)(nil).Time))
}

// Type mocks base method.
func (m *MockEvent) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockEventMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockEvent)(nil).Type))
}
