// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethpandaops/contributoor/internal/events (interfaces: BeaconDataProvider)
//
// Generated by this command:
//
//	mockgen -package mock -destination mock/beacon_data_provider.mock.go github.com/ethpandaops/contributoor/internal/events BeaconDataProvider
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	beacon "github.com/ethpandaops/beacon/pkg/beacon"
	ethwallclock "github.com/ethpandaops/ethwallclock"
	gomock "go.uber.org/mock/gomock"
)

// MockBeaconDataProvider is a mock of BeaconDataProvider interface.
type MockBeaconDataProvider struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconDataProviderMockRecorder
	isgomock struct{}
}

// MockBeaconDataProviderMockRecorder is the mock recorder for MockBeaconDataProvider.
type MockBeaconDataProviderMockRecorder struct {
	mock *MockBeaconDataProvider
}

// NewMockBeaconDataProvider creates a new mock instance.
func NewMockBeaconDataProvider(ctrl *gomock.Controller) *MockBeaconDataProvider {
	mock := &MockBeaconDataProvider{ctrl: ctrl}
	mock.recorder = &MockBeaconDataProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconDataProvider) EXPECT() *MockBeaconDataProviderMockRecorder {
	return m.recorder
}

// GetEpoch mocks base method.
func (m *MockBeaconDataProvider) GetEpoch(epoch uint64) ethwallclock.Epoch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpoch", epoch)
	ret0, _ := ret[0].(ethwallclock.Epoch)
	return ret0
}

// GetEpoch indicates an expected call of GetEpoch.
func (mr *MockBeaconDataProviderMockRecorder) GetEpoch(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpoch", reflect.TypeOf((*MockBeaconDataProvider)(nil).GetEpoch), epoch)
}

// GetEpochFromSlot mocks base method.
func (m *MockBeaconDataProvider) GetEpochFromSlot(slot uint64) ethwallclock.Epoch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpochFromSlot", slot)
	ret0, _ := ret[0].(ethwallclock.Epoch)
	return ret0
}

// GetEpochFromSlot indicates an expected call of GetEpochFromSlot.
func (mr *MockBeaconDataProviderMockRecorder) GetEpochFromSlot(slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochFromSlot", reflect.TypeOf((*MockBeaconDataProvider)(nil).GetEpochFromSlot), slot)
}

// GetSlot mocks base method.
func (m *MockBeaconDataProvider) GetSlot(slot uint64) ethwallclock.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlot", slot)
	ret0, _ := ret[0].(ethwallclock.Slot)
	return ret0
}

// GetSlot indicates an expected call of GetSlot.
func (mr *MockBeaconDataProviderMockRecorder) GetSlot(slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlot", reflect.TypeOf((*MockBeaconDataProvider)(nil).GetSlot), slot)
}

// GetWallclock mocks base method.
func (m *MockBeaconDataProvider) GetWallclock() *ethwallclock.EthereumBeaconChain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallclock")
	ret0, _ := ret[0].(*ethwallclock.EthereumBeaconChain)
	return ret0
}

// GetWallclock indicates an expected call of GetWallclock.
func (mr *MockBeaconDataProviderMockRecorder) GetWallclock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallclock", reflect.TypeOf((*MockBeaconDataProvider)(nil).GetWallclock))
}

// IsSlotFromUnexpectedNetwork mocks base method.
func (m *MockBeaconDataProvider) IsSlotFromUnexpectedNetwork(eventSlot uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSlotFromUnexpectedNetwork", eventSlot)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSlotFromUnexpectedNetwork indicates an expected call of IsSlotFromUnexpectedNetwork.
func (mr *MockBeaconDataProviderMockRecorder) IsSlotFromUnexpectedNetwork(eventSlot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSlotFromUnexpectedNetwork", reflect.TypeOf((*MockBeaconDataProvider)(nil).IsSlotFromUnexpectedNetwork), eventSlot)
}

// Node mocks base method.
func (m *MockBeaconDataProvider) Node() beacon.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node")
	ret0, _ := ret[0].(beacon.Node)
	return ret0
}

// Node indicates an expected call of Node.
func (mr *MockBeaconDataProviderMockRecorder) Node() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockBeaconDataProvider)(nil).Node))
}

// Synced mocks base method.
func (m *MockBeaconDataProvider) Synced(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Synced", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Synced indicates an expected call of Synced.
func (mr *MockBeaconDataProviderMockRecorder) Synced(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Synced", reflect.TypeOf((*MockBeaconDataProvider)(nil).Synced), ctx)
}
