syntax = "proto3";

package config.v1;

option go_package = "github.com/ethpandaops/contributoor/proto/config/v1;config";

import "buf/validate/validate.proto";

// RunMethod defines how the service is run.
enum RunMethod {
  // Invalid, should not be used.
  RUN_METHOD_UNSPECIFIED = 0;
  // Run using docker.
  RUN_METHOD_DOCKER = 1;
  // Run using systemd/launchd service manager.
  RUN_METHOD_SYSTEMD = 2;
  // Run directly as a binary.
  RUN_METHOD_BINARY = 3;
}

// NetworkName defines which Ethereum network the beacon node is running on.
enum NetworkName {
  // Invalid, should not be used.
  NETWORK_NAME_UNSPECIFIED = 0;
  // Ethereum mainnet.
  NETWORK_NAME_MAINNET = 1;
  // Sepolia testnet.
  NETWORK_NAME_SEPOLIA = 2;
  // Holesky testnet.
  NETWORK_NAME_HOLESKY = 3;
  // Hoodi testnet.
  NETWORK_NAME_HOODI = 4;
}

// Config represents the main configuration for the contributoor service.
message Config {
  // LogLevel is the log level to use.
  string log_level = 1;
  // Version of the contributoor service running.
  string version = 2;
  // Directory where contributoor houses its configuration and related data.
  string contributoor_directory = 3;
  // RunMethod is the method used to run the contributoorservice.
  RunMethod run_method = 4 [(buf.validate.field).enum = { not_in: [0] }];
  // NetworkName is the name of the network the beacon node is running on.
  string network_name = 5;
  // BeaconNodeAddress is the address of the beacon node.
  // Can be a single address or comma-separated list of addresses.
  string beacon_node_address = 6 [
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ];
  // MetricsAddress is the (optional) address to serve metrics on.
  string metrics_address = 7;
  // PprofAddress is the (optional) address to serve pprof on.
  string pprof_address = 8;
  // OutputServer is the configuration for the output server.
  OutputServer output_server = 9;
  // DockerNetwork is the name of the docker network to use.
  string docker_network = 10;
  // HealthCheckAddress is the (optional) address to serve healthcheck on.
  string health_check_address = 11;
  // AttestationSubnetCheck controls attestation subnet-based subscription filtering.
  AttestationSubnetCheck attestation_subnet_check = 12;
}

// AttestationSubnetCheck represents configuration for attestation subnet checking.
message AttestationSubnetCheck {
  // Enabled controls whether attestation subnet checking is enabled.
  bool enabled = 1;
  // MaxSubnets is the maximum number of subnets a node can be subscribed to
  // before single_attestation topic is disabled.
  uint32 max_subnets = 2 [(buf.validate.field).uint32 = { lte: 64 }];
  // MismatchDetectionWindow is the number of slots to track for subnet activity.
  uint32 mismatch_detection_window = 3;
  // MismatchThreshold is the number of mismatches required before triggering reconnection.
  uint32 mismatch_threshold = 4;
  // MismatchCooldownSeconds is the cooldown period between reconnections in seconds.
  uint32 mismatch_cooldown_seconds = 5;
  // SubnetHighWaterMark allows temporary participation in additional subnets
  // without triggering a restart. This accommodates validators temporarily
  // joining subnets to submit attestations while protecting privacy.
  uint32 subnet_high_water_mark = 6;
}


// OutputServer represents configuration for the output server.
message OutputServer {
  // Address of the output server, eg: where the Xatu output server is running.
  string address = 1 [
    (buf.validate.field).string.uri = true,
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ];
  // Optional credentials for authentication, this is a base64 encoded string in the format of "username:password".
  string credentials = 2;
  // TLS is whether to use TLS for the output server.
  bool tls = 3;
}
